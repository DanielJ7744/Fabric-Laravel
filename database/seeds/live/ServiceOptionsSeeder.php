<?php

use Illuminate\Database\Seeder;
use App\Models\Fabric\ServiceOption;

class ServiceOptionsSeeder extends Seeder
{
    private const SERVICE_OPTIONS = [
        'action',
        'add_inventory_detail',
        'add_or_update_website_assignment',
        'adjust_quantities_if_higher',
        'alert_on_sync_failure',
        'allow_multiple_invoices',
        'attempt_refund',
        'auto_update',
        'batch_size',
        'cancelled_status_id',
        'channel',
        'channel_id',
        'channel_source',
        'combine_skus',
        'common_ref',
        'common_ref_field',
        'common_ref_key',
        'configurable_on',
        'create_creditmemo',
        'create_fake_variant_when_no_data',
        'create_itemreceipt',
        'create_products_disabled',
        'currency',
        'currency_code',
        'customer_page',
        'data_array',
        'database_record_type',
        'date_format',
        'DateValue',
        'db_record_type',
        'db_type',
        'dc_code',
        'delete_invalid_customfields',
        'delete_remote',
        'discount_itemid',
        'document_number',
        'download_remote_items',
        'drop_already_received_line_items',
        'entry_type',
        'explode_tags',
        'fetch_missing_inventory_ids',
        'file_name_key',
        'file_prefix',
        'file_suffix',
        'filter_cancelled_despatches',
        'filter_out_unchanged_products',
        'filter_out_unchanged_stocklevels',
        'filter_postage_refund',
        'filter_products_by_status',
        'filter_source',
        'filters',
        'filter_zero_quantity',
        'force_non_partial_fulfilment',
        'force_password_reset',
        'from_record',
        'full_inventory_update',
        'get_brand_data',
        'get_coo_value',
        'get_custom_fields',
        'get_customer_addresses',
        'get_customer_attributes',
        'get_customer_custom_fields',
        'get_hs_code',
        'get_inventory_item_data',
        'get_new_order',
        'ignore_none_shipped',
        'skip_no_items',
        'handle_variant_products',
        'handle_multi_line_sku',
        'get_remote_records',
        'process_addresses',
        'get_order_comments',
        'get_order_risks',
        'get_product_images',
        'get_source_record_id',
        'hold_status_id',
        'ids_record_type',
        'idx_endpoint_id',
        'idx_source_id',
        'ignore_magento_orders',
        'ignore_order_updates',
        'include_columns',
        'index_prices',
        'index_products_only',
        'inject_customer_meta_data',
        'inject_meta_data',
        'item_custom_fields',
        'join_character',
        'journal_batch_name',
        'journal_template_name',
        'line_item_refund_state_uuid',
        'location_id',
        'log_lines_being_sent_to_nav',
        'log_out_items_on_po',
        'log_out_pvx_request',
        'log_rebound_success',
        'lookup_order_id',
        'make_multiples',
        'make_nav_attributes_global',
        'mappings',
        'match_fulfilment_using_system_chain',
        'match_order_on_name',
        'max_attempts',
        'netsuite_common_ref_field',
        'netsuite_record_type',
        'no_item_filtering',
        'no_stock_tag',
        'notify_customer',
        'option_attributes',
        'order_category',
        'order_page',
        'origin',
        'overwrite_local_data_path',
        'page',
        'page_size',
        'payment_type',
        'personalisation_properties',
        'pre_set_filters',
        'process_as_batches',
        'process_as_translated_batches',
        'process_tags',
        'product_filters',
        'product_tags',
        'product_type_id',
        'product_visibility',
        'PublishToWebOnly',
        'ready_status_id',
        'record_array_name',
        'remove_empty_products',
        'record_mode',
        'record_type',
        'refund_item_properties',
        'refund_type',
        'remote_path',
        'remove_0_quantity_line_items',
        'remove_back_orders',
        'remove_cancelled_confirmations',
        'remove_fulfilments_without_tracking',
        'remove_personalisation_item',
        'restock',
        'resync',
        'return_field',
        'returns_type',
        'scope',
        'send_to_snowflake',
        'send_translated_data_to_snowflake',
        'separate_adjustments',
        'service_system_chain',
        'set_gross_cm_price',
        'set_gross_ra_price',
        'set_net_cm_price',
        'set_net_ra_price',
        'set_new_products_disabled',
        'shipping_line_sku',
        'site',
        'skip_category_pull',
        'skip_customer_import',
        'skip_customer_refund_after_credit_memo',
        'skip_customer_update',
        'skip_download_remote_records',
        'skip_full_inventory_pull',
        'skip_metafields_update',
        'skip_on_tags',
        'skip_product_flag',
        'skip_product_prices',
        'skip_products_with_no_sku',
        'skip_records_with_no_email',
        'skip_remote_file_check',
        'skip_shipping_zone',
        'sku_field',
        'snowflake_mapping_name',
        'source_id_field',
        'source_record_id_field',
        'source_record_type',
        'static_product_tags',
        'static_system_chain',
        'stock_channel',
        'store_failed_order',
        'store_individual_item_receipt_refs',
        'store_remaining_items',
        'template_name',
        'text_option',
        'timezone',
        'transfer_to_warehouse_service',
        'transition_key',
        'transition_status',
        'update_inventory_items',
        'update_order_state',
        'use_globale_data',
        'use_gross_price',
        'use_items_hash_matching_to_add_missing_fulfilment_ids',
        'use_legacy_script',
        'use_net_price',
        'use_original_order_price',
        'use_pagination',
        'update_product_records_only',
        'use_short_shopify_order_id',
        'variant_code_delimiter',
        'batch_limit',
        'move_remote',
        'move_remote_path',
        'move_to_s3',
        'process_as_batch',
        'reporting_currency',
        'send_to_ftp',
        'fetch_extended_customer_data',
        'format_meta_data',
        'order_status_whitelist',
        'filtered_global_nav_attributes',
        'warehouse',
        'warehouse_id'
    ];

    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run(): void
    {
        foreach (self::SERVICE_OPTIONS as $key) {
            if (ServiceOption::where(['key' => $key])->doesntExist()) {
                ServiceOption::create(['key' => $key]);
            }
        }
    }
}
